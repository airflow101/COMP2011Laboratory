D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp: In function 'void modify_customer_type(Customer*&, int, const char*)':
D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp:90:38: error: too few arguments to function 'void insert_customer(Customer*&, Customer*)'
     insert_customer(modified_customer);
                                      ^
D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp:18:6: note: declared here
 void insert_customer(Customer*& head, Customer* c){
      ^~~~~~~~~~~~~~~
D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp:94:25: error: no match for 'operator=' (operand types are 'Customer' and 'Customer*')
   for(customer_before = head; modified_sequence < pos; modified_sequence++, customer_before = customer_before->next);
                         ^~~~
In file included from D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp:3:
D:\COMP2011\Laboratory\Laboratory 9\Customer.h:6:8: note: candidate: 'constexpr Customer& Customer::operator=(const Customer&)'
 struct Customer {
        ^~~~~~~~
D:\COMP2011\Laboratory\Laboratory 9\Customer.h:6:8: note:   no known conversion for argument 1 from 'Customer*' to 'const Customer&'
D:\COMP2011\Laboratory\Laboratory 9\Customer.h:6:8: note: candidate: 'constexpr Customer& Customer::operator=(Customer&&)'
D:\COMP2011\Laboratory\Laboratory 9\Customer.h:6:8: note:   no known conversion for argument 1 from 'Customer*' to 'Customer&&'
D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp:94:110: error: base operand of '->' has non-pointer type 'Customer'
   for(customer_before = head; modified_sequence < pos; modified_sequence++, customer_before = customer_before->next);
                                                                                                              ^~
D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp:95:38: error: base operand of '->' has non-pointer type 'Customer'
   modified_customer = customer_before->next;
                                      ^~
D:\COMP2011\Laboratory\Laboratory 9\Customer.cpp:97:18: error: base operand of '->' has non-pointer type 'Customer'
   customer_before->next = modified_customer->next
                  ^~
